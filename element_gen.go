package rankdb

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Element) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Score, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Score")
		return
	}
	{
		var zb0002 uint64
		zb0002, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "ID")
			return
		}
		z.ID = ElementID(zb0002)
	}
	z.Payload, err = dc.ReadBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	z.TieBreaker, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "TieBreaker")
		return
	}
	z.Updated, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "Updated")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Element) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Score)
	if err != nil {
		err = msgp.WrapError(err, "Score")
		return
	}
	err = en.WriteUint64(uint64(z.ID))
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	err = en.WriteBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	err = en.WriteUint32(z.TieBreaker)
	if err != nil {
		err = msgp.WrapError(err, "TieBreaker")
		return
	}
	err = en.WriteUint32(z.Updated)
	if err != nil {
		err = msgp.WrapError(err, "Updated")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Element) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendUint64(o, z.Score)
	o = msgp.AppendUint64(o, uint64(z.ID))
	o = msgp.AppendBytes(o, z.Payload)
	o = msgp.AppendUint32(o, z.TieBreaker)
	o = msgp.AppendUint32(o, z.Updated)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Element) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Score, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Score")
		return
	}
	{
		var zb0002 uint64
		zb0002, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ID")
			return
		}
		z.ID = ElementID(zb0002)
	}
	z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	z.TieBreaker, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TieBreaker")
		return
	}
	z.Updated, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Updated")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Element) Msgsize() (s int) {
	s = 1 + msgp.Uint64Size + msgp.Uint64Size + msgp.BytesPrefixSize + len(z.Payload) + msgp.Uint32Size + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ElementID) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint64
		zb0001, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ElementID(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ElementID) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint64(uint64(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ElementID) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ElementID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint64
		zb0001, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ElementID(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ElementID) Msgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexElement) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Element":
			err = z.Element.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Element")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexElement) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Element"
	err = en.Append(0x81, 0xa7, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Element.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Element")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexElement) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Element"
	o = append(o, 0x81, 0xa7, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	o, err = z.Element.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Element")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexElement) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Element":
			bts, err = z.Element.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Element")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexElement) Msgsize() (s int) {
	s = 1 + 8 + z.Element.Msgsize()
	return
}
